Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Available Methods
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					There are a variety of methods for manipulating requests Zapier makes to your API. Below is the complete list of methods you can use in scripting. You may provide any, all, or none of these methods.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Trigger Methods
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Many of the trigger methods follow a naming pattern of key + method name, where key is the key given to the trigger when you created it. Below, we use the convention of
							Element:code
								TRIGGER_KEY
								as the placeholder for the trigger's actual key. For example, if you define a trigger with the key "my_trigger" and you want to implement the pre_poll method, you would write a method called
							Element:code
								my_trigger_pre_poll
								.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Polling
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_pre_poll
											- runs before the request to the polling URL, can modify the request before it is sent.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_post_poll
											- runs after we receive a response from the polling URL. Can parse the response to format the data that enters Zapier.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_poll bundle>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>, # with unique 'id' key
										Element:span
											<object> # with unique 'id' key
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_poll
											- runs in place of pre_poll and post_poll. You get a bundle and are expected to make the request and return a list of results.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Arguments:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the query string
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											If you include a callback in the arguments, you can also perform async:
										Element:span
											callback(err, response)
										Element:span
											You are expected to make the request yourself. The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>, # with unique 'id' key
										Element:span
											<object> # with unique 'id' key
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// or callback(null, [])
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Static and REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_catch_hook
											- runs when we receive a static or subscription hook from your API. Can parse the response to format the data that enters Zapier.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_catch_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.method: <str> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.querystring: <str>
										Element:span
											bundle.request.content: <str>
										Element:span
											bundle.cleaned_request: <object> or <array> # our best guess at parsing
										Element:span
											# and combining the request
										Element:span
											# (including handling JSON & XML).
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be either a JSON serializable array...
										Element:span
											[
										Element:span
											<object>,
										Element:span
											<object>
										Element:span
											]
										Element:span
											...or a single object:
										Element:span
											<object>
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// or {}
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											REST Hooks and Notification REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_subscribe
											- runs before we subscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_subscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.event: <string> # the event being subscribed to
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											post_subscribe
											- runs after we subscribe. It is exclusively for storing results that are needed later for pre_unsubscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											post_subscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from pre_subscribe bundle>
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.event: <string> # the event (if any) that was subscribed to
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable, you'll have access to it as
										Element:span
											subscribe_data in the unsubscribe call. Normally you'd store some state
										Element:span
											about the hook resource you created, for example, some apps need
										Element:span
											an ID to locate and unsubscribe from a hook.
										Element:span
											*/
										Element:span
											return
										Element:span
											""
										Element:span
											;
										Element:span
											// or {}, or []
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_unsubscribe
											- runs before we unsubscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_unsubscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.subscribe_data <json> # any data you returned from post_subscribe
										Element:span
											bundle.event: <string> # the event (if any) being unsubscribed from
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notification REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_hook
											- runs before the consuming call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											post_hook
											- runs after we receive a response from the consuming call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_hook bundle>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>,
										Element:span
											<object>
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Available to all triggers
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_pre_custom_trigger_fields
											- runs before the request to the custom field URL (if provided).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_custom_trigger_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_post_custom_trigger_fields
											- runs after the response for custom fields is received.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_custom_trigger_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_hook bundle>
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											# `type` can be unicode, int, bool
										Element:span
											# `key` should be unique and match a key found in the JSON representation we receive from your API
										Element:span
											# `label` is a human-readable name we can give this field in the UI
										Element:span
											{'type': <str>, 'key': <str>, 'label': <str>}
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Action Methods
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Action methods follow a naming pattern of key + method name, where key is the key given to the action when you created it. Below, we use the convention of
							Element:code
								ACTION_KEY
								as the placeholder for the action's actual key. For example, if you define an action with the key "my_action" and you want to implement the pre_write method, you would write a method called
							Element:code
								my_action_pre_write
								.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								ACTION_KEY_pre_write
								- runs before the request to the action URL, can modify the request before it is sent.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								ACTION_KEY_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.files: <object> # object of keys/arrays
							Element:span
								# * 1st item: filename str or null
							Element:span
								# * 2nd item: zapier.com endpoint that will stream the file
							Element:span
								# * 3rd item: mimetype str or null
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.action_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.action_fields_full: <object> # all replaced users' fields
							Element:span
								bundle.action_fields_raw: <object> # before we replace users' variables
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								auth: <array> # [username, password]
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								files: <object> # object of keys/arrays - experimental!
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								auth
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								auth
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								ACTION_KEY_post_write
								- runs after we receive a response from the action endpoint, can modify the response (and clarify murky errors).
							Element:em
								Note:
								If the action occurs as part of a search-or-create Zap, the output of this method is
							Element:em
								not
								exactly what the user sees. In that case, the action will be followed up with a request to fetch the written record, and we will present the user with the output from that follow-up request. If you need to modify the returned data in that scenario, use
							Element:code
								_post_read_resource
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								ACTION_KEY_post_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.action_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.action_fields_full: <object> # all replaced users' fields
							Element:span
								bundle.action_fields_raw: <object> # before we replace users' variables
							Element:span
								bundle.request: <original object from ACTION_KEY_pre_write bundle>
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response will be used to give the user more fields to use
							Element:span
								in the next step of the Zap. Please return a JSON serializable object.
							Element:span
								return <object>;
							Element:span
								*/
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								ACTION_KEY_write
								- runs in place of pre_write and post_write. You get a bundle and are expected to make the request and return the appropriate response.
							Element:em
								Note:
								If the action occurs as part of a search-or-create Zap, the output of this method is
							Element:em
								not
								exactly what the user sees. In that case, the action will be followed up with a request to fetch the written record, and we will present the user with the output from that follow-up request. If you need to modify the returned data in that scenario, use
							Element:code
								_post_read_resource
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								ACTION_KEY_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								,
							Element:span
								[
							Element:span
								callback
							Element:span
								])
							Element:span
								{
							Element:span
								/*
							Element:span
								Arguments:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.files: <object> # object of keys/arrays
							Element:span
								# * 1st item: filename str or null
							Element:span
								# * 2nd item: zapier.com endpoint that will stream the file
							Element:span
								# * 3rd item: mimetype str or null
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.action_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.action_fields_full: <object> # all replaced users' fields
							Element:span
								bundle.action_fields_raw: <object> # before we replace users' variables
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								If you include a callback in the arguments, you can also perform async:
							Element:span
								callback(err, response)
							Element:span
								The response will be used to give the user more fields to use
							Element:span
								in the next step of the Zap. Please return a JSON serializable object.
							Element:span
								return <object>;
							Element:span
								*/
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								ACTION_KEY_pre_custom_action_fields
								- runs before the request to the custom field URL (if provided).
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								ACTION_KEY_pre_custom_action_fields
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.action_fields: <object> # the raw action fields (if applicable)
							Element:span
								bundle.zap: <object> # info about the zap (details below)
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								auth: <array> # [username, password]
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								auth
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								auth
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								ACTION_KEY_post_custom_action_fields
								- runs after the response for custom fields is received.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								ACTION_KEY_post_custom_action_fields
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								bundle.request: <original object from ACTION_KEY_pre_custom_action_fields bundle>
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be JSON serializable:
							Element:span
								[
							Element:span
								# `type` can be unicode, int, bool
							Element:span
								# `key` should be unique, and will be the "key" in "key: value" in the POST
							Element:span
								# `help_text` and `label` are also available
							Element:span
								{'type': <str>, 'key': <str>}
							Element:span
								]
							Element:span
								*/
							Element:span
								return
							Element:span
								[];
							Element:span
								// return fields in the order you want them displayed in the UI. They'll be appended after the regular action fields
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Search Methods
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Search methods follow a naming pattern of key + method name, where key is the key given to the search when you created it. Below, we use the convention of
							Element:code
								SEARCH_KEY
								as the placeholder for the search's actual key. For example, if you define an search with the key "my_search" and you want to implement the pre_search method, you would write a method called
							Element:code
								my_search_pre_search
								.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_pre_search
								- runs before the request to the search URL, can modify the request before it is sent.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_pre_search
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.search_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								auth: <array> # [username, password]
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								auth
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								auth
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_post_search
								- runs after we receive a response from the search endpoint, can modify the response (and clarify murky errors).
							Element:em
								Note:
								The output of the method is
							Element:em
								not
								exactly what the user sees. We follow searches up with requests for the individual resources and present the user with the output from those follow-up requests. If you wish to modify the number (or ordering) of the search results, use
							Element:code
								_post_search
								. If you wish to modify the data the user sees, use
							Element:code
								_post_read_resource
								. One other thing to be aware of is that searches must return an
							Element:em
								array
								of objects, so if your search endpoint returns a single object, you can use this method to wrap your object in an array.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Note we'll only use the first object in the array for now, so if you can add optional fields to help narrow the search down, it's a great idea.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_post_search
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.search_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.request: <original object from SEARCH_KEY_pre_search bundle>
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response is an array, which may contain zero or more matches.
							Element:span
								If multiple matches are found, sort the array with the "best match" first.
							Element:span
								Use the available exceptions to vary errors.
							Element:span
								*/
							Element:span
								return
							Element:span
								[
							Element:span
								];
							Element:span
								// no matches
							Element:span
								/* --- or --- */
							Element:span
								return
							Element:span
								[
							Element:span
								{
							Element:span
								...
							Element:span
								}
							Element:span
								];
							Element:span
								// return a single match
							Element:span
								/* --- or --- */
							Element:span
								return
							Element:span
								[
							Element:span
								{
							Element:span
								...
							Element:span
								},
							Element:span
								{
							Element:span
								...
							Element:span
								},
							Element:span
								...
							Element:span
								];
							Element:span
								// several matches, with "best match" first
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_search
								- runs in place of pre_search and post_search. You get a bundle and are expected to make the request and return the appropriate response. Note: The output of the method is not exactly what the user sees. We follow searches up with requests for the individual resources and present the user with the output from those follow-up requests. If you wish to modify the number (or ordering) of the search results, you can do that inside
							Element:code
								_search
								. If you wish to modify the data the user sees, use
							Element:code
								_post_read_resource
								.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Note we'll only use the first object in the array for now, so if you can add optional fields to help narrow the search down, it's a great idea.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_search
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								,
							Element:span
								[
							Element:span
								callback
							Element:span
								])
							Element:span
								{
							Element:span
								/*
							Element:span
								Arguments:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.search_fields: <object> # pruned and replaced users' fields
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								If you include a callback in the arguments, you can also perform async:
							Element:span
								callback(err, response)
							Element:span
								The response will be used to give the user more fields to use
							Element:span
								in the next step of the Zap. Please return a JSON serializable object.
							Element:span
								*/
							Element:span
								return
							Element:span
								{...};
							Element:span
								// or callback(null, {...})
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_pre_custom_search_fields
								- runs before the request to the custom field URL (if provided).
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_pre_custom_search_fields
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.search_fields: <object> # the raw search fields (if applicable)
							Element:span
								bundle.zap: <object> # info about the zap (details below)
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								auth: <array> # [username, password]
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								auth
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								auth
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_post_custom_search_fields
								- runs after the response for custom fields is received.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_post_custom_search_fields
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								bundle.request: <original object from SEARCH_KEY_pre_custom_search_fields bundle>
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be JSON serializable:
							Element:span
								[
							Element:span
								# `type` can be unicode, int, bool
							Element:span
								# `key` should be unique, and will be the "key" in "key: value" in the POST
							Element:span
								# `help_text` and `label` are also available
							Element:span
								{'type': <str>, 'key': <str>}
							Element:span
								]
							Element:span
								*/
							Element:span
								return
							Element:span
								[];
							Element:span
								// return fields in the order you want them displayed in the UI. They'll be appended after the regular search fields
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_pre_read_resource
								- runs before we do the request to read an individual resource. Use to modify the request before it is sent.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_pre_read_resource
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'GET'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
							Element:span
								bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
							Element:span
								bundle.zap: <object> # info about the zap (details below)
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								auth: <array> # [username, password]
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								auth
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								auth
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_post_read_resource
								- runs after we do the request to read an individual resource. Use to modify the data returned.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_post_read_resource
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								bundle.request: <original object from SEARCH_KEY_pre_read_resource bundle>
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
							Element:span
								bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response will be used to give the user more fields to use
							Element:span
								in the next step of the Zap. Please return a JSON serializable object.
							Element:span
								return <object>;
							Element:span
								*/
							Element:span
								return
							Element:span
								{...};
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								SEARCH_KEY_read_resource
								- runs in place of pre_read_resource and post_read_resource. You get a bundle and are expected to make the request and return the appropriate response.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								SEARCH_KEY_read_resource
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								,
							Element:span
								[
							Element:span
								callback
							Element:span
								])
							Element:span
								{
							Element:span
								/*
							Element:span
								Arguments:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'POST'
							Element:span
								bundle.request.auth: <array> # [username, password]
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <string> # str or null
							Element:span
								bundle.url_raw: <string>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
							Element:span
								bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								If you include a callback in the arguments, you can also perform async:
							Element:span
								callback(err, response)
							Element:span
								The response should be an object representing the resource. Can also use the available exceptions to vary errors.
							Element:span
								*/
							Element:span
								return
							Element:span
								{...};
							Element:span
								// or callback(null, {...})
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication Methods
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								pre_oauthv2_token
								- modify the request we'd send to the access token endpoint.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								pre_oauthv2_token
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'GET'
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <object>
							Element:span
								bundle.oauth_data: <object> # obj that contains your client_id, client_secret, etc...
							Element:span
								bundle.load: <object> # the params set to be sent as form/query string...
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								post_oauthv2_token
								- modify the response from the access token endpoint.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								post_oauthv2_token
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.response.status_code: <integer>
							Element:span
								bundle.response.headers: <object>
							Element:span
								bundle.response.content: <str>
							Element:span
								*/
							Element:span
								// If you have defined extra fields besides access_token
							Element:span
								// and refresh_token in the Extra Requested Fields setup,
							Element:span
								// you may return them here as well.
							Element:span
								return
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								pre_oauthv2_refresh
								- modify the request we'd send to the refresh token endpoint. Only use if you have set the auth type for your App to be OAuth V2 with Refresh.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								pre_oauthv2_refresh
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.method: <string> # 'GET'
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <object>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.oauth_data: <object> # obj that contains your client_id, client_secret, etc...
							Element:span
								bundle.load: <object> # the params set to be sent as form/query string...
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								The response should be an object of:
							Element:span
								url: <string>
							Element:span
								method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
							Element:span
								headers: <object>
							Element:span
								params: <object> # this will be mapped into the query string
							Element:span
								data: <string> or null # request body: optional if POST, not needed if GET
							Element:span
								*/
							Element:span
								return
							Element:span
								{
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								,
							Element:span
								method
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								,
							Element:span
								data
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								};
							Element:span
								// or return bundle.request;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
							Element:code
								Session Authentication
								: Zapier exposes a
							Element:code
								get_session_info()
								function for APIs that require any form of session-based authorization. Feel free to use the following skeleton function to inspire your session authorization:
							Element:p
								Zapier will only invoke this function on an as-needed basis. That means, in your
							Element:code
								KEY_post_poll
								or
							Element:code
								KEY_post_write
								functions, you should raise an
							Element:code
								InvalidSessionException
								when your API denies a request due to missing or stale session credentials. Zapier will then call the following function and retry the request.
						Node:
						(type) c
						(layer)2
							Element:pre
								↑ Was this documentation useful?
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								get_session_info
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								/*
							Element:span
								Argument:
							Element:span
								bundle.request.url: <string>
							Element:span
								bundle.request.headers: <object>
							Element:span
								bundle.request.params: <object> # this will be mapped into the querystring
							Element:span
								bundle.request.data: <object>
							Element:span
								bundle.auth_fields: <object>
							Element:span
								bundle.zap: <object> # info about the zap
							Element:span
								*/
							Element:span
								// Make z.request calls as needed.
							Element:span
								// Returned object will be mixed into bundle.auth_fields in future calls.
							Element:span
								return
							Element:span
								{
							Element:span
								'api_key'
							Element:span
								:
							Element:span
								api_key
							Element:span
								};
							Element:span
								}
							Element:span
								};
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
