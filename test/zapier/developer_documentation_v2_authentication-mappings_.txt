Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication Mappings
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Auth mappings tell us how to interpret what your user provides as usable Basic Auth, Digest Auth, HTTP headers and query strings. Let's use an example where there are two auth fields available to us:
				Element:code
					account_name
					and
				Element:code
					api_key
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Basic Auth
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:p
														Your app might use
													Element:code
														api_key
														as the username and password is ignored:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														{
													Element:span
														"username"
													Element:span
														:
													Element:span
														"{{api_key}}"
													Element:span
														,
													Element:span
														"password"
													Element:span
														:
													Element:span
														"x"
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
														Or maybe, where
													Element:code
														account_name
														is the username and
													Element:code
														api_key
														is the password:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														{
													Element:span
														"username"
													Element:span
														:
													Element:span
														"{{account_name}}"
													Element:span
														,
													Element:span
														"password"
													Element:span
														:
													Element:span
														"{{api_key}}"
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
														Which will automatically create and use a header like:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Authorization: Basic WkFQSUVSIExPVkVTIFlPVTpYT1hP
												Node:
												(type) c
												(layer)4
													Element:a
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Digest Auth
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Your app might have
										Element:code
											account_name
											as the username and
										Element:code
											api_key
											as the password:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"username"
										Element:span
											:
										Element:span
											"{{account_name}}"
										Element:span
											,
										Element:span
											"password"
										Element:span
											:
										Element:span
											"{{api_key}}"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											We handle the computation of the response, so you don't have to think about realms, nonces, or qop's.
									Node:
									(type) c
									(layer)3
										Element:a
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key Header Auth
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Say your app has two headers called
										Element:code
											X-Account-Name
											and
										Element:code
											X-API-Key
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"X-Account-Name"
										Element:span
											:
										Element:span
											"{{account_name}}"
										Element:span
											,
										Element:span
											"X-API-Key"
										Element:span
											:
										Element:span
											"{{api_key}}"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Which will automatically create and use headers like:
									Node:
									(type) c
									(layer)3
										Element:pre
											X-Account-Name: myfancyaccount X-API-Key: 0123456789
									Node:
									(type) c
									(layer)3
										Element:a
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key Query strings
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											If your app uses an API key passed as a parameter in the query string, let's call it
										Element:code
											user_key
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"user_key"
										Element:span
											:
										Element:span
											"{{api_key}}"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Which will append
											â†‘ Was this documentation useful?
										Element:code
											?user_key=0123456789
											to the end of a URL.
									Node:
									(type) c
									(layer)3
										Element:span
											Can't find what you're looking for? We'd love to help.
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
											Send us a message
											. Get Help
									Node:
									(type) c
									(layer)3
										Element:noscript
										Element:img
