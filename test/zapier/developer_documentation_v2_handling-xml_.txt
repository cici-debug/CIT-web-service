Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Mad Mimi (API Key & XML)
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This example app with showcase a simple usage of scripting to parse XML. The rest of the example is pretty straightforward and might be applicable to other APIs even if they don't use XML. To make this example even more real world, we'll be implementing a real API for a real service called
				Element:strong
					Mad Mimi
					!
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Quick Preparation Checklist
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								If you plan to follow along, it is recommended you set up everything beforehand and keep these resources open and ready for quick access.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								You must have a
							Element:a
								Zapier account
								.
							Element:li
								You must have a
							Element:a
								Mad Mimi account
								.
							Element:li
								Read the the
							Element:a
								Mad Mimi developer platform
								.
							Element:li
								Learn a bit about our
							Element:a
								Scripting
								facilities, we'll need that to parse XML.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								The first thing you'll want to do is create the app you'll be working on, this is probably the simplest thing of all! Just go to your developer apps and click the "Create App" button and enter the information.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								The first thing to do is describe how the API authenticates, you can click the
							Element:strong
								Get Started
								button after you create your app to do that.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								If your browse the
							Element:a
								Mad Mimi developer docs
								you'll notice they place their authentication bits in the querystring of a URL like so:
							Element:code
								?username={{username}}&api_key={{api_key}}
								. Luckily Zapier supports
							Element:strong
								API Key Querystring
								authentication natively!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you choose
							Element:strong
								API Key
								and
							Element:strong
								Querystring
								, you'll have the option to add more Authentication fields in addition the the most basic version which is just a field for
							Element:code
								api_key
								which we'll add for you by default:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Since Mad Mimi requires the
							Element:code
								username
								in addition to
							Element:code
								api_key
								we can very easily
							Element:strong
								Add Authentication Field
								for the username portion as will (which Mad Mimi sometimes refers to as email as well). You'll need to fill it out similar to this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you save, we'll show you both fields that we'll present to the user to fill out: both
							Element:code
								username
								and
							Element:code
								api_key
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Finally, you'll need to define the mapping: that is where we take the user provided authentication values and place them into the querystring using a simple JSON mapping:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								In case it the above screenshot is hard to read or you need some copy pasta, here are the values in the raw for the auth mapping:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"username"
							Element:span
								:
							Element:span
								"{{username}}"
							Element:span
								,
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								"{{api_key}}"
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Your First Trigger
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Now, authentication should be finished! The next piece is to create a test trigger that uses that authentication to confirm that it all works. It isn't uncommon to repurpose a normal trigger as a test trigger, so let's do that! The trigger we'll add is one that enumerates a new
							Element:em
								Audience List
								and you can read about in the
							Element:a
								Mad Mimi Audience List API documentation
								, let's get hopping, just click to create your first trigger:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you input the trigger basics (be sure to uncheck "hide" since you are making a normal trigger at the same time), you'll have the option to create trigger fields. Since the endpoint in question doesn't need anything in addition to the standard username and api_key which Zapier will place for you automatically, so you can just skip this step:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The last bit for this trigger is placing the API URL we need to hit to get an array of audience lists, again, you can get that from
							Element:a
								Mad Mimi Audience List API documentation
								, it looks something like
							Element:code
								http://api.madmimi.com/audience_lists/lists.xml
								, just paste it in the right spot!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The only piece we're missing is the XML parsing via our javascript scripting feature, but before we attempt to write that it's time to go test the app on the
							Element:a
								editor
								.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								All developer apps are available immediately on your account, you can just visit your
							Element:a
								editor
								and use your app just like any other app Zapier supports!
						Node:
						(type) c
						(layer)2
							Element:p
								Just select your app, and continue through the editor:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And add your authentication in the second step:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Since all we care about is the
							Element:code
								200
								response, the test passes fine! However, we're still getting XML that we can't quite understand, you can view the HTTP logs back in the developer app overview to get an idea of what it looks like:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And if you view the details you should see the content we got back in the response:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Scripting Your First Trigger
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Now its time to load up the code editor! Since we called the trigger
							Element:code
								audience_list
								, we can write a
							Element:code
								audience_list_post_poll
								method to handle the otherwise successful response and convert the XML to JSON. To get started, just open up the code editor:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The input, code and output that works for this example is this:
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Input
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														<?xml version="1.0" encoding="UTF-8"?>
													Element:span
														<lists>
													Element:span
														<list
													Element:span
														subscriber_count=
													Element:span
														"0"
													Element:span
														display_name=
													Element:span
														""
													Element:span
														name=
													Element:span
														"My Test List"
													Element:span
														id=
													Element:span
														"933748"
													Element:span
														/>
													Element:span
														</lists>
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Code
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														Zap
													Element:span
														=
													Element:span
														{
													Element:span
														audience_list_post_poll
													Element:span
														:
													Element:span
														function
													Element:span
														(
													Element:span
														bundle
													Element:span
														)
													Element:span
														{
													Element:span
														// use the provided dom methods with a familiar jquery interface
													Element:span
														xmlElements
													Element:span
														=
													Element:span
														$
													Element:span
														(
													Element:span
														$
													Element:span
														.
													Element:span
														parseXML
													Element:span
														(
													Element:span
														bundle
													Element:span
														.
													Element:span
														response
													Element:span
														.
													Element:span
														content
													Element:span
														)).
													Element:span
														find
													Element:span
														(
													Element:span
														'list'
													Element:span
														);
													Element:span
														// return a list of objects that are json serializable
													Element:span
														return
													Element:span
														_
													Element:span
														.
													Element:span
														map
													Element:span
														(
													Element:span
														xmlElements
													Element:span
														,
													Element:span
														function
													Element:span
														(
													Element:span
														listElement
													Element:span
														)
													Element:span
														{
													Element:span
														listElement
													Element:span
														=
													Element:span
														$
													Element:span
														(
													Element:span
														listElement
													Element:span
														);
													Element:span
														// pull off each attribute manually, place into object
													Element:span
														return
													Element:span
														{
													Element:span
														id
													Element:span
														:
													Element:span
														listElement
													Element:span
														.
													Element:span
														attr
													Element:span
														(
													Element:span
														'id'
													Element:span
														),
													Element:span
														subscriber_count
													Element:span
														:
													Element:span
														listElement
													Element:span
														.
													Element:span
														attr
													Element:span
														(
													Element:span
														'subscriber_count'
													Element:span
														),
													Element:span
														display_name
													Element:span
														:
													Element:span
														listElement
													Element:span
														.
													Element:span
														attr
													Element:span
														(
													Element:span
														'display_name'
													Element:span
														),
													Element:span
														name
													Element:span
														:
													Element:span
														listElement
													Element:span
														.
													Element:span
														attr
													Element:span
														(
													Element:span
														'name'
													Element:span
														),
													Element:span
														};
													Element:span
														});
													Element:span
														},
													Element:span
														};
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Output
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														[
													Element:span
														{
													Element:span
														"name"
													Element:span
														:
													Element:span
														"My Test List"
													Element:span
														,
													Element:span
														"display_name"
													Element:span
														:
													Element:span
														""
													Element:span
														,
													Element:span
														"id"
													Element:span
														:
													Element:span
														"933748"
													Element:span
														,
													Element:span
														"subscriber_count"
													Element:span
														:
													Element:span
														"0"
													Element:span
														}
													Element:span
														]
												Node:
												(type) c
												(layer)4
													Element:p
														If you want to check out more examples for
													Element:code
														post_poll
														methods check out our
													Element:a
														scripting documentation
														.
												Node:
												(type) c
												(layer)4
													Element:p
														That's it for your first trigger that lives a double life as a test trigger (and will power a dynamic dropdown very shortly!). Keep reading, let's wrap up this app!
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Your First Action
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								The primary action we'll want to create is one that can add an audience member to a list. Of course, we'll need to provide the
							Element:code
								list
								and
							Element:code
								email
								address at minimum (which an option to expand to more fields if you like). Take a quick look at the
							Element:a
								Add audience member list in the Mad Mimi docs
								to get your bearings, and let's jump straight in!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								This first thing is to define a bit of the basic information about the action, like below:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Next is time for action fields! You should see a screen like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Your goal is to get it looking more like:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								You can do that by adding new action fields, be sure to define the dynamic dropdown source as
							Element:code
								audience_list.id.name
								to reference the trigger we made earlier. That will create a dropdown that a user can easily use to power their apps. For example:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When you create the email action field, be sure to check the "Send In JSON" option, you'll see why when we revisit your scripts in just a moment.
						Node:
						(type) c
						(layer)2
							Element:p
								Now your action fields should look something like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The last step is letting us know where we should
							Element:code
								POST
								the data to! The URL should look something like
							Element:code
								http://api.madmimi.com/audience_lists/{{audience_list}}/add
								. Note, the
							Element:code
								audience_list
								variable in the URL: that is referencing the dynamic dropdown action field. In the interface, the URL should be be placed in this location:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And that's it for the action definition, next up we need to convert our default
							Element:code
								application/json
								encoding into
							Element:code
								application/x-www-form-urlencoded
								, the "Send In JSON" option decides what we serialize by default, but you can always build even more complex structures from the
							Element:code
								bundle.action_fields
								object if you need to. We're just keeping it simple!
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Default Input
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
														{"email":"hello@world.com"}
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Code
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														Zap
													Element:span
														=
													Element:span
														{
													Element:span
														// place other methods from earlier code here!
													Element:span
														audience_member_pre_write
													Element:span
														:
													Element:span
														function
													Element:span
														(
													Element:span
														bundle
													Element:span
														)
													Element:span
														{
													Element:span
														bundle
													Element:span
														.
													Element:span
														request
													Element:span
														.
													Element:span
														data
													Element:span
														=
													Element:span
														$
													Element:span
														.
													Element:span
														param
													Element:span
														(
													Element:span
														JSON
													Element:span
														.
													Element:span
														parse
													Element:span
														(
													Element:span
														bundle
													Element:span
														.
													Element:span
														request
													Element:span
														.
													Element:span
														data
													Element:span
														));
													Element:span
														bundle
													Element:span
														.
													Element:span
														request
													Element:span
														.
													Element:span
														headers
													Element:span
														[
													Element:span
														'Content-Type'
													Element:span
														]
													Element:span
														=
													Element:span
														'application/x-www-form-urlencoded'
													Element:span
														;
													Element:span
														return
													Element:span
														bundle
													Element:span
														.
													Element:span
														request
													Element:span
														;
													Element:span
														}
													Element:span
														};
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Corrected Output
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:pre
														email=hello%40world.com
												Node:
												(type) c
												(layer)4
													Element:p
														Alrighty, that wraps up all the work we need to do to make this action work. You are welcome to expand action fields out past
													Element:code
														email
														by including
													Element:code
														first_name
														,
													Element:code
														last_name
														,
													Element:code
														country
														,
													Element:code
														state
														, etc. However, we're going to leave this example as simple as possible!
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Test it out!
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								If you go back to your
							Element:a
								editor
								and do a full page refresh, you should be able to select Mad Mimi and Add Audience Member as the action. As you scroll down to the mapping step, you should see something like:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Depending on what you use as the trigger, in the test step you can load some samples and send the sample across the wire to Mad Mimi and the action you just created:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you complete that, go back to your developer app and view the HTTP requests to ensure that the request got sent:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And its also a good idea to login to Mad Mimi and ensure you see the email there too!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								With that, I give you a well-earned
								↑ Was this documentation useful?
							Element:strong
								congratulations!
								You've created an example application with a mix of XML and form encoded payloads that uses API keys, scripting, and dynamic dropdowns!
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
