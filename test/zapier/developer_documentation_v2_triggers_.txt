Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Triggers
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Triggers
								answer the question:
							Element:em
								What events can my users listen for with Zapier?
								They are things like:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								New Contact
							Element:em
								(EG: Highrise or Salesforce)
							Element:li
								New Email
							Element:em
								(EG: Gmail or IMAP)
							Element:li
								New Issue
							Element:em
								(EG: GitHub or Pivotal Tracker)
						Node:
						(type) c
						(layer)2
							Element:p
								You can think of a Trigger as a GET or read. It involves Zapier receiving data from your app.
						Node:
						(type) c
						(layer)2
							Element:p
								For example, say your app has a "New Ticket Opened" trigger. We will watch for new tickets in a user's account. The data we trigger off of might look like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[
							Element:span
								{
							Element:span
								"id"
							Element:span
								:
							Element:span
								123456
							Element:span
								,
							Element:span
								"owner_id"
							Element:span
								:
							Element:span
								654
							Element:span
								,
							Element:span
								"date_created"
							Element:span
								:
							Element:span
								"Mon, 25 Jun 2012 16:41:54 -0400"
							Element:span
								,
							Element:span
								"description"
							Element:span
								:
							Element:span
								"Add our app to Zapier"
							Element:span
								}
							Element:span
								]
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Note: The data in the response must be an array, even for a single data point.
						Node:
						(type) c
						(layer)2
							Element:p
								These key/values are available for users to map into the
							Element:a
								action
								as they see fit.
						Node:
						(type) c
						(layer)2
							Element:p
								What a user sees:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								What a developer sees:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								See also:
							Element:a
								Triggers in the CLI
						Node:
						(type) c
						(layer)2
							Element:p
								You can define your triggers via your app's dashboard. When you create a new trigger, you'll be prompted with several options. Below we list all complete definitions of what each option is for.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Trigger Options
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Name
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											This is a human readable label a user would see when browsing the directory and adding your app. Make it short but descriptive.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											New Ticket Created
											or
										Element:code
											New Email with Label
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Noun
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											This is the object that the trigger is most closely associated with. It will be a noun you used in the Name field. We rely on an accurate noun to generate human-friendly sentences for users.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
											"New Ticket Created" would have "Ticket" as the noun. "New Email with Label" would use "Email" or "Labeled Email".
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Key
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											This is a field only really used internally for both
										Element:a
											dynamic dropdown
											and
										Element:a
											scripting
											references. Needs to be at least two characters long, start with an alpha, and only contain
										Element:code
											a-z
											,
										Element:code
											A-Z
											,
										Element:code
											0-9
											or
										Element:code
											_
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											new_ticket
											, or
										Element:code
											newEmailLabel
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Help Text
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A longer description of what this trigger actually watches for.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											Triggers when a new email occurs with a label of your choice.
									Node:
									(type) c
									(layer)3
										Element:p
											Demo:
										Element:br
										Element:em
											the user will see
										Element:strong
											Name
											and
										Element:strong
											Help Text
											like below:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Important
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Occasionally, you'll have unimportant triggers which are used mostly to drive things like
										Element:a
											dynamic dropdown
											, but could be useful to a small subset of users. If you mark a trigger as unimportant, we will hide the trigger behind a link. The user can still pick these if they really want to but it is hidden by default.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Note: if you have no important triggers, we will not hide any of them by default.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Hide
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											If you create a trigger solely to be used in a
										Element:a
											dynamic dropdown
											and it will never be helpful to users, you can mark it as hidden. We will never show the trigger in the UI and users will not be able to pick it.
									Node:
									(type) c
									(layer)3
										Element:p
											This usually comes up with
										Element:a
											test triggers
											, where the test trigger is for an endpoint that always returns the same data (a user profile, for instance).
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Paging
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											When defining a trigger to power a
										Element:a
											dynamic dropdown
											you can use the
										Element:a
											Scripting API
											to implement paging by relying on
										Element:code
											bundle.meta.page
											.
									Node:
									(type) c
									(layer)3
										Element:p
											This flag must be set in order to enable paging in the dynamic dropdowns powered by this trigger. If set, the user will see the option in the dropdown to load more choices: “Don’t see your choices? Try loading more than {x}.”
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Otherwise, the user will see standard language: “Check {your app} and reload the data”
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Note: Paging is
										Element:strong
											not used
											in normal trigger polling calls.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Polling: URL
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Where in your API can
										Element:a
											we poll
											for this trigger? Your URL route can include
										Element:a
											variables
											(from
										Element:a
											authentication fields
											and
										Element:a
											trigger fields
											), as well as query parameters. Query parameters are helpful for telling your API to sort things in reverse-chronological order,
										Element:a
											a requirement we have
											.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Important: this endpoint should return a
										Element:em
											list
											of JSON objects.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											https://example.com/api/v1/users/{{id}}/contacts.json?sort=desc&on=date_created
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														A Warning about encoding URL params
													Element:a
														#
												Node:
												(type) c
												(layer)4
													Element:p
														We will not automatically encode any URL variables, so you're responsible for encoding any if they require that. For example, emails
													Element:em
														might
														include a
													Element:code
														+
														sign, so if you have
													Element:code
														https://example.com/api/v1/users?email={{email}}
														you'll want to encode that in your
													Element:a
														(or remove it from there and add it to the
													Element:code
														TRIGGER_KEY_pre_poll
													Element:code
														bundle.request.params
														), otherwise you'll get a "space" where the
													Element:code
														+
														sign is.
												Node:
												(type) c
												(layer)4
													Element:p
														A better approach is to not even include it in the URL (it'll be added and encoded automatically in that case).
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Trigger Fields URL
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											This allows you to dynamically define user-friendly labels for data returned by triggers. These labels are shown to users in the Zap editor when setting up Actions.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											http://api.example.com/v2/fields.json
											or
										Element:code
											http://{{account}}.example.com/api/v1/fields.json
									Node:
									(type) c
									(layer)3
										Element:p
											If your polling trigger returns:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"q_1"
										Element:span
											:
										Element:span
											"Yes"
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
											You can return in the custom fields URL something like:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"label"
										Element:span
											:
										Element:span
											"Are you happy with your service?"
										Element:span
											,
										Element:span
											"key"
										Element:span
											:
										Element:span
											"q_1"
										Element:span
											,
										Element:span
											"important"
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											"type"
										Element:span
											:
										Element:span
											"unicode"
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
											And the UI will be more easy to understand.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Read more about
										Element:a
											custom field formatting here
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Webhook: Event Name
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A part of our
										Element:a
											REST Hooks
											, this lets you namespace the name of event that this trigger identifies with.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Webhook: Static Webhook
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A part of our
										Element:a
											static webhooks
											, this simply toggles the ability to receive webhooks and disables polling.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Webhook: Static Webhook Directions
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A part of our
											↑ Was this documentation useful?
										Element:a
											static webhooks
											, when static webhooks are in use this lets you define specialized directions for setup. It also supports
										Element:a
											Markdown
											so you can provide links or other specialized HTML formatting.
									Node:
									(type) c
									(layer)3
										Element:span
											Can't find what you're looking for? We'd love to help.
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
											Send us a message
											. Get Help
									Node:
									(type) c
									(layer)3
										Element:noscript
										Element:img
