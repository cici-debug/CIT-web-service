Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Bert the bot, and automating some of our release process
					by Mark on June 7/2011
			Node:
			(type) c
			(layer)1
				Element:p
					At FreshBooks, we do releases every other week. In the time between, we sometimes need to push small hotfixes out. We use jabber to communicate changes between our operations team and the developers. Tickets or issues that need to be deployed go into a “Hotfix Queue”. In the past we’ve manually managed that queue both in our heads and as the topic of the group chat. As we’ve grown managing this queue mentally and manually in the groupchat title has become a bit tedious. This seemed like a perfect place to implement some better tooling.
			Node:
			(type) c
			(layer)1
				Element:p
					I figured it would be pretty simple to whip up a chat bot in Node.js using
				Element:a
					node-xmpp
					Within an afternoon, I was able to crank out a passable prototype that assisted in managing the outgoing issue queue. Since then, the bot has been enhanced and improved to the point of being a useful, easy to extend, entertaining utility. Its current feature set includes getting weather information, managing our release issue queue, and I’m planning on adding when the next bus will arrive at the office, as soon as the TTC opens that data set up.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Design of the bot
									Node:
									(type) c
									(layer)3
										Element:p
											The bot is designed around having a number of tasks that respond to different commands. Commands can be any set of characters, and calling a command is done by starting a message to the group chat or directly to the bot starting with those characters. For example the Weather task has two commands
										Element:code
											!weather
											and
										Element:code
											!forecast
											. Any message starting with either of those values will be parsed by the bot and the text that follows will be sent to the task.
									Node:
									(type) c
									(layer)3
										Element:p
											I think this gives you a pretty flexible and powerful way to make command based bot tasks. The commands can easily interact with any HTTP or socket based interface thanks to node’s great built in socket support. The bot also provides a simple promise implementation for building bot commands that require asynchronous work.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Installing the bot
									Node:
									(type) c
									(layer)3
										Element:p
											I’ve put the bot up on
										Element:a
											github
											and installing it is pretty simple. You’ll need Node.js 0.4.6 or greater, and npm 1.0. After cloning the repository, or downloading a tar file, you can install all the dependencies with npm
									Node:
									(type) c
									(layer)3
										Element:pre
											npm bundle
									Node:
									(type) c
									(layer)3
										Element:p
											This will download all the dependencies into the
										Element:code
											node_modules
											, afterwards you should copy the
										Element:code
											config.json.sample
											to
										Element:code
											config.json
											and add in your connection information and task configuration. After the configuration file is in place you can start the bot with
										Element:code
											node bot.js
											. Your bot should join the configured rooms, and respond to direct messages.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Future improvements
									Node:
									(type) c
									(layer)3
										Element:p
											While the bot works, and does what it does reasonably well, I can see a few areas of improvement. Currently its impossible to make logging or non-command based tasks. It’d be useful to be able to make message listeners that could respond to conversation as it happens. The bot could also benefit from a few more general purpose tasks, like reminders and leaving notes for other people. Hopefully, if you’re on a jabber network all day, you’ll find this bot useful, and be able to help automate some part of your day.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
