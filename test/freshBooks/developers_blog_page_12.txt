Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
								Try FreshBooks Free
						Node:
						(type) c
						(layer)2
							Element:p
								No credit card required. Cancel anytime.
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:p
								Already have an account?
							Element:a
								Log in
							Element:p
							Element:a
								Security Safeguards
								|
							Element:a
								Terms of Service
								|
							Element:a
								Privacy Policy
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Making code lazy to improve page performance
									Node:
									(type) c
									(layer)3
										Element:p
											By Mark on October 26th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											As you may or may not know browsers are way faster than they used to be. Nearly everything – bandwidth, client processing power, storage – is cheaper than it was. However, one thing that is still really expensive is interacting with the DOM. Changing and modifying the DOM, especially when those interactions cause page reflows and repaints, can quickly become so costly it ruins the user experience. A perfect example of this are the “comboboxes” we use on invoices, estimates and expenses in FreshBooks. Each time we create a combobox, it inserts content into the DOM. This is a totally reasonable strategy when you are making 1 – 10 of them. However, it becomes a significant bottle neck when you have to do several hundred, as we did when we started working on the expense import feature. Things slowed to a crawl.
									Node:
									(type) c
									(layer)3
										Element:p
											Since interacting with and manipulating the DOM was proving to be our bottleneck, the solution was to not interact with it. Or at least, not in big sets of interaction. When we did have to interact with it, we would have to do so in small chunks so we didn’t lock the UI thread in the browser. Locking…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											TechTalksTO: Ali Asaria
									Node:
									(type) c
									(layer)3
										Element:p
											By jesse on October 22nd, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											I’m excited to announce that everything is set for our next instalment of TechTalksTO and it is going to be a great one. Next up we have Ali Asaria, CEO of
										Element:a
											Well.ca
											. Ali will present “How to Develop at a Startup: The Detailed Development Philosophy and Architecture of Well.ca’s Technology”.
									Node:
									(type) c
									(layer)3
										Element:p
											This will be a technical talk that covers:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Agile cycles and the software the allows it
										Element:li
											Architecture of Well.ca and the philosophy behind it
										Element:li
											Data visualization and tools to use
									Node:
									(type) c
									(layer)3
										Element:p
											He’ll go into detail about how they deploy their software, do A/B testing and visualize their data. This is a talk that no engineer developing software for the web should miss.
									Node:
									(type) c
									(layer)3
										Element:p
											We’re going to continue with the same format as before which includes some time before the talk to meet Ali, and some time after to drink beer and hang out some more.
									Node:
									(type) c
									(layer)3
										Element:p
											You can signup for the talk
										Element:a
											here
											. Look forward to seeing you there!
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											New API Features rolled out Oct 19th
									Node:
									(type) c
									(layer)3
										Element:p
											By Jason Diller on October 19th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											Hi everybody, we’ve just released a whole bunch of API features out into the world. So many, in fact, that I won’t waste any more of your time with needless preamble. Here we go:
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Project Hour Budgeting
									Node:
									(type) c
									(layer)3
										Element:p
											Last month, we
										Element:a
											added hour budgeting
											to projects. Starting today you can now get and set the hour budget for projects via the API. The ‘hour_budget’ element will be included in the output from both
										Element:a
											‘project.list’
											and
										Element:a
											‘project.get’
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample output:
												Node:
												(type) c
												(layer)4
													Element:pre
														<response xmlns="https://www.freshbooks.com/api/" status="ok"> <project> <project_id>1</project_id> <name>A client project</name> <description></description> <rate>500</rate> <bill_method>flat-rate</bill_method> <client_id>2</client_id> <!--hour budget is now included--> <hour_budget>56.00</hour_budget> <staff> <staff_id>1</staff_id> </staff> </project> </response>
												Node:
												(type) c
												(layer)4
													Element:p
														Likewise, you can set the project’s hour budget in both
													Element:a
														‘project.create’
														and
													Element:a
														‘project.update’
														:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Input:
												Node:
												(type) c
												(layer)4
													Element:pre
														<?xml version="1.0" encoding="utf-8"?> <request method="project.update"> <project> <project_id>15</project_id> <hour_budget>1000</hour_budget> </project> </request>
												Node:
												(type) c
												(layer)4
													Element:p
														But wait there’s more…
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Search Clients by Notes
									Node:
									(type) c
									(layer)3
										Element:p
											You can now use the Notes field to filter clients when making calls to
										Element:a
											‘client.list’
											. The filter will match the specified string anywhere in the notes field. (Equivalent to specifying “…WHERE notes like ‘%filter_value%’” in SQL).
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Input:
												Node:
												(type) c
												(layer)4
													Element:p
														This request:
												Node:
												(type) c
												(layer)4
													Element:pre
														<?xml version="1.0" encoding="utf-8"?> <request method="client.list"> <notes>candy</notes> </request>
												Node:
												(type) c
												(layer)4
													Element:p
														Produces this output:
												Node:
												(type) c
												(layer)4
													Element:pre
														<?xml version="1.0" encoding="utf-8"?> <response xmlns="https://www.freshbooks.com/api/" status="ok"> <clients page="1" per_page="15" pages="1" total="2"> <client> <client_id>13</client_id> <first_name>Jane</first_name>
														…
												Node:
												(type) c
												(layer)4
													Element:a
														Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Video: Jeff Lindsay’s ‘APIs That Make Things Happen’
									Node:
									(type) c
									(layer)3
										Element:p
											By jesse on September 28th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											The first TechTalksTO was a great success. Thank you to everyone who came out to support it and even more thanks to those who helped eat the 300 appetizers we accidentally ordered. Jeff’s talk on Webhooks and the ‘evented web’ was entertaining, informative and inspiring. I’ve embedded it below for anyone who might have missed it.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Tech Talks TO — APIs That Make Things Happen: WebHooks and the Evented Web
											from
										Element:a
											FreshBooks
											on
										Element:a
											Vimeo
											. (we had a few encoding issues, sorry!)
									Node:
									(type) c
									(layer)3
										Element:p
											The next talk is already booked so mark your calendar! November 10th we’ll be bringing in Eli Aleyner. Eli was an engineer on Amazon’s Mechanical Turk project and has some great stories on some of the scaling issues they ran into getting that project off the ground. Look for more details soon!
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											New API Features debuting September 21
									Node:
									(type) c
									(layer)3
										Element:p
											By Jason Diller on September 20th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											Hi there FreshBooks integrators and other generally interested parties!
									Node:
									(type) c
									(layer)3
										Element:p
											As of today, we have some new API features to announce. The keen-eyed among you may have already noticed
									Node:
									(type) c
									(layer)3
										Element:p
											some new elements in the xml we send in response to various API calls. If you didn’t, don’t sweat it, I’ll tell you
									Node:
									(type) c
									(layer)3
										Element:p
											about them now:
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Folders
									Node:
									(type) c
									(layer)3
										Element:p
											Within the FreshBooks web UI, many items can have a visibility status of Active, Archived, or Deleted. For the purposes of
									Node:
									(type) c
									(layer)3
										Element:p
											the API, we decided to call those three states “folders” and we now provide a <folder> element to indicate which
									Node:
									(type) c
									(layer)3
										Element:p
											of the three states the object is in. Yes, that’s right. You can now list
										Element:strong
											deleted
											items through the API.
									Node:
									(type) c
									(layer)3
										Element:p
											That’s not really the cool part though. You can also now filter on the folder when you make a request to any of the *.list
									Node:
									(type) c
									(layer)3
										Element:p
											methods, and specify which folder you’d want to get objects from:
									Node:
									(type) c
									(layer)3
										Element:pre
											&lt!--List only active invoices--> <?xml version="1.0" encoding="utf-8"> <request method="invoice.list"> <folder>active</folder> </request>
									Node:
									(type) c
									(layer)3
										Element:p
											Note that this means that by specifying <folder>deleted</folder>, you can now access deleted items via the API (yay!),
									Node:
									(type) c
									(layer)3
										Element:p
											something that wasn’t possible before. Also note that only the .list methods have changed.
									Node:
									(type) c
									(layer)3
										Element:p
											If you request a deleted…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
									Node:
									(type) c
									(layer)3
										Element:a
											Newer Posts
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
