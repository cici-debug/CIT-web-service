Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
								Try FreshBooks Free
						Node:
						(type) c
						(layer)2
							Element:p
								No credit card required. Cancel anytime.
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:p
								Already have an account?
							Element:a
								Log in
							Element:p
							Element:a
								Security Safeguards
								|
							Element:a
								Terms of Service
								|
							Element:a
								Privacy Policy
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											A Puzzle For College
									Node:
									(type) c
									(layer)3
										Element:p
											By Corey on January 6th, 2011
									Node:
									(type) c
									(layer)3
										Element:p
											FreshBooks is hiring co-op students, so a few of us zipped up to Waterloo yesterday to chat with university students about working at FreshBooks. We talked about working on big production systems with tons of users who really rely on your work day in and day out, about having the freedom to figure out your own solutions and use your favourite tools, and how much I love hitting people with Nerf swords.
									Node:
									(type) c
									(layer)3
										Element:p
											We also gave the students a puzzle — first person to supply a correct answer would win a gift certificate (and show us that they’re pretty smart, too). Here’s the puzzle:
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Suppose we sent a million invoices this month,
										Element:strike
											a quarter of them on the first, a sixteenth on the second, and so forth.
										Element:p
											On the first we send a quarter of them (rounded up), then each subsequent day we send a quarter of what remains, until the last day, when all the remaining ones for the month are sent.
										Element:p
											Every weekday in a month adds 0.25% to the total for next month, compounded and rounded down (once).
										Element:p
											So since there are 21 weekdays in January, next month we’ll be sending:
										Element:p
											floor(1,000,000
										Element:em
											1.0025
											… * 1.0025)
										Element:p
											= floor(1053833.517…)
										Element:p
											…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Large, Simple Shapes
									Node:
									(type) c
									(layer)3
										Element:p
											By Corey on December 13th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											At FreshBooks, we like bright colours and large, simple shapes. Also short sentences. Or even sentence fragments.
									Node:
									(type) c
									(layer)3
										Element:p
											Anyway, the development team at FreshBooks works on a variety of applications. While most of our users just see a single application taking care of their invoicing, behind the scenes there’s an array of independent applications, all working together to make things happen. We deploy this application eco-system every two weeks, so the team needs to first off, be clear on the status of the current release (are we going to be ready for the upcoming release or is the avalanche of work killing us?), and second (off), know right away when a given app is failing to build properly in the development environment.
									Node:
									(type) c
									(layer)3
										Element:p
											At FreshBooks we use
										Element:a
											Hudson
											to manage our builds, and run all the unit tests on every commit. If the unit tests don’t pass, the build is “failed” and stays “failed” until the offending commit is fixed and the unit tests pass.
									Node:
									(type) c
									(layer)3
										Element:p
											At first, Hudson just sent out an email whenever a build failed. Then Hudson started posting failure notes into the FreshBooks developer chat room. But we wanted something better than that. Something, of course, with bright colours…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Writing Clean Maintainable JavaScript
									Node:
									(type) c
									(layer)3
										Element:p
											By coe on November 15th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											JavaScript comes with a bit of historical baggage — it’s that thing that you don’t rely on, that thing advertisers use. Perhaps this is why design best practices have, in the worst case, been ignored in JavaScript and, in the best case, lagged behind other languages. I don’t think I’m putting forward anything revolutionary in this post, I just wanted to introduce some of the methodologies I employ to write elegant, maintainable, JavaScript code.
									Node:
									(type) c
									(layer)3
										Element:p
											I recently built Schedgy, a lightweight calendaring application, for scheduling support shifts at FreshBooks. Schedgy allows our support scheduler to drag and drop employees onto the days of a month, indicating the shifts they will be working.
									Node:
									(type) c
									(layer)3
										Element:p
											I am going to use Schedgy to frame the conversation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											1. Don’t Treat JavaScript Like a Second-Class Citizen
									Node:
									(type) c
									(layer)3
										Element:p
											I approach a JavaScript problem like I approach any software design problem — I decompose the problem space into a logical domain model. I am in the habit of using John Resig’s
										Element:a
											Simple Inheritance Micro Framework
											. This provides the classical inheritance I crave, having come from Java-land in a past life. Using something like
										Element:a
											Mootools
											, or plain old prototypal inheritance works too — as long as you don’t sit…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Silence Means Assent
									Node:
									(type) c
									(layer)3
										Element:p
											By Corey on November 4th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
											The FreshBooks development team is a group of peers. There are team leads, but we don’t have a single senior person who makes all or most of the technical decisions, or who sets the technical agenda.
									Node:
									(type) c
									(layer)3
										Element:p
											Following this practice can lead to some messy times, when different people on the team have different ideas as to what’s the best plan. For example, deciding to use Python for our new data access layer was long-fought decision. Consensus can be a tough goal to reach, but at the same time, FreshBooks is growing fast and we need to make changes in an alacritious manner.
									Node:
									(type) c
									(layer)3
										Element:p
											At a recent team discussion, we decided on a principle we call “Silence Means Assent”. It works by the combination of a couple of principles:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Everyone on the team has the right to raise an issue and propose a solution.
										Element:li
										Element:p
											If you don’t offer any comments on a proposed solution, you are assumed to support the proposed solution.
										Element:li
											If you don’t implement your solution, it’s not going to get done.
									Node:
									(type) c
									(layer)3
										Element:p
											That’s it.
									Node:
									(type) c
									(layer)3
										Element:p
											A system as big as FreshBooks is guaranteed to have plenty of places where it behaves sub-optimally. What Silence Means Assent does is allow any developer…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Nothing is Critical
									Node:
									(type) c
									(layer)3
										Element:p
											By Corey on October 28th, 2010
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
											“Oh, that can’t be right. That’s just a sneaky title to get me to read this.”
									Node:
									(type) c
									(layer)3
										Element:p
											Well, yeah. But it’s true, NOTHING is critical.
									Node:
									(type) c
									(layer)3
										Element:p
											In my career, I’ve set up and managed at least a dozen different issue tracking systems. And all of these tracking system had a feature called a “Priority” field — it allows you to mark an issue as “Low”, or “Medium” or “CRITICAL”, or whatever. However, I’ve never worked anywhere it was actually used.
									Node:
									(type) c
									(layer)3
										Element:p
											Let’s face it: what’s critical today is whatever everyone’s rushing around trying to pull together. Everyone knows what’s critical, because that’s the thing they’re already working on.
									Node:
									(type) c
									(layer)3
										Element:p
											There’s this cheerful sort of fantasy where product managers (or unicorns, or other semi-mythical beings) go thoughtfully through the entire list of issues and rank their individual importance. This task completed, the entire team now has an effortless way of deciding what to do next — just pull the next CRITICAL item off the list until there are no more CRITICAL ones, then start on the IMPORTANT ones. Or perhaps the URGENT ones. Whatever.
									Node:
									(type) c
									(layer)3
										Element:p
											Of course, what actually happens differs from this dream in two ways. First, the thoughtful priority ranking never ever happens. Look,…
									Node:
									(type) c
									(layer)3
										Element:a
											Continue reading
									Node:
									(type) c
									(layer)3
										Element:a
											Newer Posts
									Node:
									(type) c
									(layer)3
										Element:a
											Older Posts
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
