Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Twig in Production
					by Mark on September 28/2011
			Node:
			(type) c
			(layer)1
				Element:p
					For the past year we’ve been busy behind the scenes updating much of the existing FreshBooks application to use Twig. If you haven’t heard of
				Element:a
					Twig
					before, it’s a great templating library for PHP. Its syntax and features are mostly inspired by
				Element:a
					Jinja2
					. Twig provides a number of features that are useful in larger applications:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Template inheritance – Useful for creating application layouts and re-using common page layouts.
				Element:li
					Horizontal reuse of blocks – You can reuse blocks from one template in another giving you an alternative way to re-use template code beyond extension.
				Element:li
					Macros – Create re-usable ‘functions’ entirely of template code.
				Element:li
					Automatic HTML escaping – The ‘killer feature’ you should look for in any template language.
				Element:li
					Sandboxing – Great for limiting what can be accessed in a template. This is really useful when exposing templates to end users.
			Node:
			(type) c
			(layer)1
				Element:p
					Automatic escaping is something I think every PHP template language should have. While PHP is ok at being a template language, it is not automatically safe against cross-site scripting attacks. Having a template language offer both syntactic sugar and invisibily securing template code with no additional work is fantastic feature. If you’re using a template language without automatic escaping you should really switch to one that does. Having to explicitly turn off HTML escaping forces you to think about whether or not content is actually safe to output. In practice, we’ve found autoescaping makes developers more confident about not having accidentally created a new XSS problems. Unlike an omitted
				Element:code
					|escape,
					which could easily get lost in the crowd, every
				Element:code
					|raw
					sticks out like a sore thumb in code review.
			Node:
			(type) c
			(layer)1
				Element:p
					We first started using Twig around the 0.9.6 release. It was chosen over the existing solution (Smarty) primarily because Twig offers a better feature set. Inheritance and automatic escaping were two concrete features that would improve our workflow. At the time Smarty 3 was still in beta, and the team wasn’t really happy with how Smarty had treated them in the past. We also considered other options:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Dwoo – This was not chosen because the project activity was not overly high, and it seemed like development had stalled.
				Element:li
				Element:p
					PHPTal – XML only meant there were going to be significant integration hurdles with our non-compliant legacy code. It
				Element:p
					also meant it would be impossible to use with plain text email templates.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Getting twig into production
									Node:
									(type) c
									(layer)3
										Element:p
											While updating all of our templates to use Twig we learned a few things along the way that are worth sharing.
									Node:
									(type) c
									(layer)3
										Element:p
											Flushing the compiled templates is important. Forgetting to do it will cause you a great deal of pain. Thankfully, Twig has this functionality built in which makes it super easy to integrate as part of your deployment:
									Node:
									(type) c
									(layer)3
										Element:pre
											<?php /** * Clean out compiled templates. * */ require_once './inc/bootstrap.php'; $environments = array(); $return = 0; echo "Clearing template cache files...\n"; // Cache files used for the actual application $environments['app'] = Fresh_Twig::getEnvironment(); // Other configurations like tests are loaded as well, // but have been omitted. foreach ($environments as $name => $environment) { $cache = $environment->getCache(); if (!$cache) { echo "[Info '$name']: skipping because caching is disabled.\n"; continue; } if (!is_dir($cache)) { echo "[Info '$name']: skipping because '$cache' does not exist.\n"; continue; } if (!is_writable($cache)) { echo "[Error '$name']: '$cache' is not writable. Try levelling up.\n"; $return++; continue; } $environment->clearCacheFiles(); echo "[Success '$name']: cleared directory '$cache'.\n"; } exit($return);
									Node:
									(type) c
									(layer)3
										Element:p
											Automate building the cache files. Deploying on a cold cache will work for a while. If you have multiple webservers and many concurrent users you should think about pre-compiling your template cache. Deploying with a hot cache will remove the possiblity of two users generating the same template cache file. It also removes the possibility for contention to occur around the creation of cache files, and finally it just reduces the amount of work done overall. Since each webserver isn’t spending time generating cache files individually they can get back to serving users faster. We use
										Element:code
											make
											and a simple php script to do this:
									Node:
									(type) c
									(layer)3
										Element:pre
											<?php /** * Simple script that gets a Twig_Enviornment and compiles all the * templates that match the glob pattern. * */ if (empty($argv[1])) { echo "No file path provided, please give a directory to compile templates in.\n"; exit(1); } if (empty($argv[2])) { $argv[2] = 'twig'; } $verbose = false; if (in_array('--verbose', $argv)) { $verbose = true; } require_once './inc/bootstrap.php'; // A wrapper that provides a Twig_Environment with // all the extensions we use attached. $environment = Fresh_Twig::getEnvironment(); $directory = new RecursiveDirectoryIterator($argv[1]); $recurser = new RecursiveIteratorIterator($directory); $matcher = new RegexIterator($recurser, '/.*?\.' . $argv[2] . '$/', RegexIterator::GET_MATCH); echo "Compiling Templates\n"; $i = 0; foreach ($matcher as $file) { try { $filename = str_replace($argv[1], '', $file[0]); $environment->loadTemplate($filename); $environment->loadTemplate('/' . $filename); if ($verbose) { echo " - " . $filename . "\n"; } else { if ($i % 72 == 0) { echo "\n"; } echo '.'; } } catch (Exception $e) { echo $e->getMessage() . "\n"; } $i++; } echo "\nTemplates compiled\n"; exit(0);
									Node:
									(type) c
									(layer)3
										Element:p
											We compile both the slash-less and leading slash versions of the template. This produces more template files, but saves us from having to be super picky about how we use twig files in our application. Before each deploy we run the make script to generate all the template cache files. The compiled templates are shipped with the code changes.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											In closing
									Node:
									(type) c
									(layer)3
										Element:p
											Since the switch to Twig last year we haven’t really hit any real problems with it. Its been a fantastic and easily extensible library. Thanks to Fabien and all the other Twig contributors for making such a solid product.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
