Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Logging actions with Python decorators Part III: Mixins
					by Taavi on June 14/2011
			Node:
			(type) c
			(layer)1
				Element:p
					Sorry for the
				Element:a
					year’s
				Element:a
					hiatus
					. It’s been busy, and I’m hoping to get a flurry of blog posts out about it shortly. But for now, let’s get down to finishing this miniseries.
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					For part 3 we’ll look at something completely different. Mixins are a way of using multiple inheritance (yes, Python has it!). Most commonly, they’re used to add a set of common helper functions to a class, such as a test class. Consider a test class that inherits from MyFooTestBase for most of its
				Element:code
					setUp()
					, but also needs the commonly-used
				Element:code
					assert_bunnies()
					assertion:
			Node:
			(type) c
			(layer)1
				Element:pre
					class TestHelper(object): def assert_bunnies(self, a_string): assert a_string == "bunnies", "Failed to find bunnies" class TestMyClass(MyFooTestBase, TestHelper): def test_foo(self): value = self.foo() self.assert_bunnies(value)
			Node:
			(type) c
			(layer)1
				Element:p
					When your method names are distinct, you can mix and match as much as you like, but be careful with your
				Element:code
					__init__()
					method if you’re using Python’s built-in
				Element:code
					unittest
					module; it wants a specific function signature that you probably don’t want to deal with (see below for dealing with multiple inheritance and
				Element:code
					__init__()
					). I’d recommend just using
				Element:a
					nosetests
					as your test collector to avoid having to subclass
				Element:code
					unittest.TestCase
					) at all.
			Node:
			(type) c
			(layer)1
				Element:p
					When the method names aren’t distinct, there’s a well-defined
				Element:a
					method resolution order (MRO)
					documented. It hasn’t changed in
				Element:a
					Python 2.7
					or even
				Element:a
					Python 3.1
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Of course, things are trickier than that. Overriding a method like
				Element:code
					__init__()
					generally means having to call your superclass…but which class is that? The MRO handles it, but not always as you might expect.
				Element:a
					Others have written
					on how
				Element:a
					you can’t use it
					(unless you follow some guidelines).
			Node:
			(type) c
			(layer)1
				Element:p
					In the past year, our code’s been refactored and a mixin no longer makes sense. We still use the decorators, though, but instead of a
				Element:code
					self._log_event
					method, they expect to find an
				Element:code
					self._event_log_manager
					object. That change wasn’t because of a problem with using mixins, but because the code has been refactored so that an event log manager is instantiated per
				Element:em
					service
					(e.g. a
				Element:code
					ProjectService
					) but we log changes to
				Element:em
					resources
					(e.g. a
				Element:code
					TaskResource
					and
				Element:code
					ProjectResource
					).
			Node:
			(type) c
			(layer)1
				Element:p
					But seriously, just stick with pure mixins instead of multiple inheritance unless you really know what you’re doing. And even then, be careful!
				Element:img
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
