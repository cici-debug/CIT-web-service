Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Logging actions with Python decorators Part II: Extracting call arguments
					by Taavi on April 28/2010
			Node:
			(type) c
			(layer)1
				Element:p
					[Update 2012-01-03]: Piotr points out that Python 2.7/3.2 introduced the new
				Element:code
					inspect.callargs
					function which does
				Element:em
					exactly
					this. So if you’re using
				Element:a
					2.7 or above
					(or
				Element:a
					3.2 or above
					), just use that. Thanks!
			Node:
			(type) c
			(layer)1
				Element:p
					Let’s start with the
				Element:code
					delete_invoice
					example from
				Element:a
					part I
					:
			Node:
			(type) c
			(layer)1
				Element:pre
					@log_event('Delete Invoice', objectid_param='invoiceid') def delete_invoice(self, invoiceid, **options): # ... return True
			Node:
			(type) c
			(layer)1
				Element:p
					The trick is that what you log varies with the call parameters. And what happens if someone needs to add another parameter to the function? What if the caller used positional instead of keyword arguments? Can you imagine a world in which all of these logged the same message:
			Node:
			(type) c
			(layer)1
				Element:pre
					delete_invoice(3) delete_invoice(invoiceid=3, convert_payments_to_credits=True) delete_invoice(dry_run=True, invoiceid=3)
			Node:
			(type) c
			(layer)1
				Element:p
					Well, there is hope. Python ships with the
				Element:a
					inspect module
					which lets you introspect modules, classes, and functions. Capturing
				Element:code
					*args
					and
				Element:code
					**kwargs
					lets you map the arguments passed to a function onto its expected arguments by name. Once you have a consistent way to get at a parameter by its name, the rest is easy.
			Node:
			(type) c
			(layer)1
				Element:p
					There are three major cases to consider:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					A keyword argument. That’s easy, just extract it from
				Element:code
					**kwargs
					.
				Element:li
					A positional argument. That’s not too much harder. Just look at the list of parameter names, and pick the right one out of
				Element:code
					*args
					by index.
				Element:li
					The argument was not passed in at all: it has a default value. Okay, this one’s tricky.
			Node:
			(type) c
			(layer)1
				Element:p
					When we have a default parameter we have to do a little more thinking. We know:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					The list of positional arguments passed in
				Element:li
					The list of all arguments
				Element:li
					The list of default argument values
			Node:
			(type) c
			(layer)1
				Element:p
					Given this def and function call:
			Node:
			(type) c
			(layer)1
				Element:pre
					def args(one, two, three, four=4444, five=55555, six=666666): pass # And this function call: args(1, 2, 3, 4)
			Node:
			(type) c
			(layer)1
				Element:p
					We have these lists (aligned vertically for clarity)
			Node:
			(type) c
			(layer)1
				Element:pre
					a = [ 1, 2, 3, 4 ] b = ['one', 'two', 'three', 'four', 'five', 'six'] c = [ 4444, 55555, 666666]
			Node:
			(type) c
			(layer)1
				Element:p
					If we want
				Element:code
					one
					,
				Element:code
					two
					,
				Element:code
					three
					, or
				Element:code
					four
					, we can easily get those by finding the index of that argument in list (b) and see that the index also exists in list (a). But if we want the value of
				Element:code
					five
					, we have more work to do; in this case, we have to convert the index of
				Element:code
					five
					(which is 4) into the index of its default value (which is 1). We can do that by taking the index we already have, subtract the length of all parameters, then add the length of the defaults. It works out:
				Element:code
					4 - 6 + 3 = 1
					. Of course, we have to make sure we don’t end up trying to take a negative index, in case someone didn’t pass in
				Element:code
					three
					, which doesn’t have a default value.
			Node:
			(type) c
			(layer)1
				Element:p
					So, here’s the big nasty. In part III we’ll take a quick peek at the mixin I mentioned in the previous post.
			Node:
			(type) c
			(layer)1
				Element:pre
					import inspect def extract_param_by_name(f, args, kwargs, param): """Find the value of a parameter by name, even if it was passed via *args or is a default value. Let's start with a fictional function: >>> def my_f(a,b,c='foo'): ... {"a":a,"b":b,"c":c} ... Works with kwargs (easy): >>> extract_param_by_name(my_f, [], {'a':1}, 'a') 1 Works with args (not obvious): >>> extract_param_by_name(my_f, [2], {}, 'a') 2 Works with default kwargs (bet you didn't think about that one): >>> extract_param_by_name(my_f, [], {}, 'c') 'foo' But of course you can override that: >>> extract_param_by_name(my_f, [99,98,97], {}, 'c') 97 In different ways: >>> extract_param_by_name(my_f, [], {'c':'gar'}, 'c') 'gar' And dies with "grace" when you do something silly: >>> extract_param_by_name(my_f, [], {}, 'a') Traceback (most recent call last): ... LoggerBadCallerParametersException: ("Caller didn't provide a required positional parameter '%s' at index %d", 'a', 0) >>> extract_param_by_name(my_f, [], {}, 'z') Traceback (most recent call last): ... LoggerUnknownParamException: ('Unknown param %s(%r) on %s', <type 'str'>, 'z', 'my_f') """ if param in kwargs: return kwargs[param] else: argspec = inspect.getargspec(f) if param in argspec.args: param_index = argspec.args.index(param) if len(args) > param_index: return args[param_index] if argspec.defaults is not None: # argsec.defaults holds the values for the LAST entries of argspec.args defaults_index = param_index - len(argspec.args) + len(argspec.defaults) if 0 <= defaults_index < len(argspec.defaults): return argspec.defaults[defaults_index] raise LoggerBadCallerParametersException("Caller didn't provide a required positional parameter '%s' at index %d", param, param_index) else: raise LoggerUnknownParamException("Unknown param %s(%r) on %s", type(param), param, f.__name__) class LoggerUnknownParamException(Exception): pass class LoggerBadCallerParametersException(Exception): pass
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Developer Stuff
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														API Overview
													Element:li
													Element:a
														Authentication
													Element:li
													Element:a
														Helper Libraries
													Element:li
													Element:a
														Application Billing
													Element:li
													Element:a
														Webhooks
													Element:li
													Element:a
														Developer Blog
													Element:a
													Element:img
													Element:li
													Element:a
														Developer Forum
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														API Calls
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Callbacks
													Element:li
													Element:a
														Categories
													Element:li
													Element:a
														Clients
													Element:li
													Element:a
														Estimates
													Element:li
													Element:a
														Expenses
													Element:li
													Element:a
														Gateway
													Element:li
													Element:a
														FreshBooks API Guide for Invoices
													Element:li
													Element:a
														Items
													Element:li
													Element:a
														Languages
													Element:li
													Element:a
														Payments
													Element:li
													Element:a
														Projects
													Element:li
													Element:a
														Receipts
													Element:li
													Element:a
														Recurring
													Element:li
													Element:a
														Staff
													Element:li
													Element:a
														System
													Element:li
													Element:a
														Tasks
													Element:li
													Element:a
														Taxes
													Element:li
													Element:a
														Time Entries
													Element:li
													Element:a
														Contractors
													Element:li
													Element:a
														Default Terms
													Element:li
													Element:a
														Reports
													Element:li
													Element:a
														Currency
													Element:li
													Element:a
														Email Templates
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Resources
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Sample Code
													Element:li
													Element:a
														Developer Tips
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Tour FreshBooks
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Online Invoicing
													Element:li
													Element:a
														Time Tracking
													Element:li
													Element:a
														Client Estimates
													Element:li
													Element:a
														Expense Tracking
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:a
													Element:img
													Element:img
													Element:p
														FreshBooks, 1655 Dupont St. Suite 250, Toronto, ON M6P 3T1 Canada
													Element:p
														Copyright © 2000-2017 FreshBooks is a service of 2ndSite Inc. All rights reserved.
													Element:p
													Element:a
														Security Safeguards
														|
													Element:a
														Terms of Service
														|
													Element:a
														Privacy Policy
												Node:
												(type) c
												(layer)4
													Element:img
